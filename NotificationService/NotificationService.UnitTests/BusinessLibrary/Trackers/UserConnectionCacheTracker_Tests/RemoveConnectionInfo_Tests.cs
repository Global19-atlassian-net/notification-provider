// <auto-generated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.BusinessLibrary.Trackers.UserConnectionCacheTracker_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Text;
    using System.Text.Json;
    using System.Threading;
    using System.Threading.Tasks;
    using Moq;
    using NotificationService.Contracts.Models.Trackers;
    using NUnit.Framework;

    /// <summary>
    /// Test class.
    /// </summary>
    /// <seealso cref="NotificationService.UnitTests.BusinessLibrary.Trackers.UserConnectionTrackerBaseTests" />
    [ExcludeFromCodeCoverage]
    public class RemoveConnectionInfo_Tests : UserConnectionCacheTrackerBaseTests
    {
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize() => this.SetupBase();

        /// <summary>
        /// Removes the connection information with invalid user object indefier.
        /// </summary>
        /// <param name="userObjectIdentifier">The user object identifier.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void RemoveConnectionInfo_WithInvalidUserObjectIndefier(string userObjectIdentifier)
        {
            var ex = Assert.Throws<ArgumentException>(() => this.userConnectionCacheTracker.RemoveConnectionInfo(userObjectIdentifier, "some"));
            Assert.IsTrue(ex.Message.StartsWith("The user object identifier is not specified.", StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Removes the connection information with invalid connection identifier.
        /// </summary>
        /// <param name="connectionId">The connection identifier.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void RemoveConnectionInfo_WithInvalidConnectionId(string connectionId)
        {
            var ex = Assert.Throws<ArgumentException>(() => this.userConnectionCacheTracker.RemoveConnectionInfo("some", connectionId));
            Assert.IsTrue(ex.Message.StartsWith("The connection Id is not specified.", StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Removes the connection information with valid inputs.
        /// </summary>
        [Test]
        public void RemoveConnectionInfo_WithValidInputs()
        {
            string connectionId = Guid.NewGuid().ToString();
            string userOid = "Test Oid";
            UserConnectionInfo userConnectionInfo = new UserConnectionInfo(connectionId);
            HashSet<UserConnectionInfo> connectionSet = new HashSet<UserConnectionInfo>();
            connectionSet.Add(userConnectionInfo);
            this.distributedCacheMock.Setup(dc => dc.GetAsync(It.IsAny<string>(), It.IsAny<CancellationToken>())).Returns(Task.FromResult<byte[]>(Encoding.UTF8.GetBytes(JsonSerializer.Serialize(connectionSet))));
            this.distributedCacheMock.Setup(dc => dc.RemoveAsync(userOid, It.IsAny<CancellationToken>())).Returns(Task.CompletedTask);
            // Act
            this.userConnectionCacheTracker.RemoveConnectionInfo(userOid, connectionId);
            this.distributedCacheMock.Verify(dc => dc.RemoveAsync(userOid, It.IsAny<CancellationToken>()), Times.Once);
        }
    }
}
