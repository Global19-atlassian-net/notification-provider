// <auto-generated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.BusinessLibrary.Trackers.UserConnectionCacheTracker_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Text;
    using System.Text.Json;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Extensions.Caching.Distributed;
    using Moq;
    using NotificationService.Contracts.Models.Trackers;
    using NUnit.Framework;

    /// <summary>
    /// Test class.
    /// </summary>
    /// <seealso cref=".UserConnectionTrackerBaseTests" />
    [ExcludeFromCodeCoverage]
    public class GetUserConnectionIds_Tests : UserConnectionCacheTrackerBaseTests
    {
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize() => this.SetupBase();

        /// <summary>
        /// Get the connection Ids with invalid user object indefier.
        /// </summary>
        /// <param name="userObjectIdentifier">The user object identifier.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void GetUserConnectionIds_WithInvalidUserObjectIndefier(string userObjectIdentifier)
        {
            string applicationName = "Some Application";
            var ex = Assert.Throws<ArgumentException>(() => this.userConnectionCacheTracker.GetUserConnectionIds(userObjectIdentifier, applicationName));
            Assert.IsTrue(ex.Message.StartsWith("The user object identifier is not specified.", StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Gets the user connection ids with invalid application name.
        /// </summary>
        /// <param name="applicationName">Name of the application.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void GetUserConnectionIds_WithInvalidApplicationName(string applicationName)
        {
            string userObjectIdentifier = Guid.NewGuid().ToString();
            var ex = Assert.Throws<ArgumentException>(() => this.userConnectionCacheTracker.GetUserConnectionIds(userObjectIdentifier, applicationName));
            Assert.IsTrue(ex.Message.StartsWith("The application name is not specified.", StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Gets the user connection ids with valid inputs.
        /// </summary>
        [Test]
        public void GetUserConnectionIds_WithValidInputs()
        {
            string connectionId = Guid.NewGuid().ToString();
            string userOid = "Test Oid";
            string applicationName = "Some Application";
            UserConnectionInfo userConnectionInfo = new UserConnectionInfo(connectionId, applicationName);
            HashSet<UserConnectionInfo> userConnectionsSet = new HashSet<UserConnectionInfo>();
            userConnectionsSet.Add(userConnectionInfo);
            userConnectionsSet.Add(new UserConnectionInfo("some", "Browser"));
            this.distributedCacheMock.Setup(dc => dc.GetAsync(It.IsAny<string>(), It.IsAny<CancellationToken>())).Returns(Task.FromResult<byte[]>(Encoding.UTF8.GetBytes(JsonSerializer.Serialize(userConnectionsSet))));
            var connectionIds = this.userConnectionCacheTracker.GetUserConnectionIds(userOid, applicationName);
            Assert.IsTrue(connectionIds.First().Equals(userConnectionInfo.ConnectionId));
            Assert.IsTrue(connectionIds.Count() == 1);
        }
    }
}
