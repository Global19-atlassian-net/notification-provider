// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.BusinessLibrary.V1.NotificationsManager_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Threading.Tasks;
    using Moq;
    using NotificationService.Contracts;
    using NotificationService.Contracts.Entities;
    using NotificationService.Contracts.Entities.Web;
    using NUnit.Framework;

    [ExcludeFromCodeCoverage]
    public class LoadNotificationStatusAsync_Tests : NotificationsTestsBase
    {
        /// <summary>
        /// Setups the base.
        /// </summary>
        [SetUp]
        public override void SetupBase()
        {
            base.SetupBase();
        }

        /// <summary>
        /// Loads the notifications status asynchronously with invalid application identifier.
        /// </summary>
        /// <param name="applicationName">Name of the application.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void LoadNotificationStatusAsync_WithInvalidApplicationId(string applicationName)
        {
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationManager.LoadNotificationStatusAsync(applicationName, new List<string> { Guid.NewGuid().ToString() }).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("The application name is not specified.", StringComparison.Ordinal));
        }

        /// <summary>
        /// Loads the notification status asynchronous with null tracking ids.
        /// </summary>
        [Test]
        public void LoadNotificationStatusAsync_WithNullTrackingIds()
        {
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationManager.LoadNotificationStatusAsync(this.ApplicationName, trackingIds: null).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("There are no tracking Ids.", StringComparison.Ordinal));
        }

        /// <summary>
        /// Loads the notification status asynchronous with empty tracking ids.
        /// </summary>
        [Test]
        public void LoadNotificationStatusAsync_WithEmptyTrackingIds()
        {
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationManager.LoadNotificationStatusAsync(this.ApplicationName, new List<string>()).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("There are no tracking Ids.", StringComparison.Ordinal));
        }

        /// <summary>
        /// Loads the notification status asynchronous with valid inputs.
        /// </summary>
        [Test]
        public async Task LoadNotificationStatusAsync_WithValidInputs()
        {
            List<string> trackingIds = new List<string> { "Tracking Id #1", "Tracking Id #2", "Tracking Id #6" };
            EntityCollection<WebNotificationItemEntity> collection = new EntityCollection<WebNotificationItemEntity>();
            collection.Items = this.NotificationEntities.Where(note => note.Application.Equals(this.ApplicationName, StringComparison.OrdinalIgnoreCase) && trackingIds.Contains(note.TrackingId, StringComparer.OrdinalIgnoreCase));
            _ = this.notificationsRepositoryMock.Setup<Task<EntityCollection<WebNotificationItemEntity>>>(rp => rp.ReadAsync(
                It.IsAny<Expression<Func<WebNotificationItemEntity, bool>>>(),
                It.IsAny<Expression<Func<WebNotificationItemEntity, NotificationPriority>>>(),
                It.IsAny<string>(),
                It.IsAny<int>())).
                Returns(Task.FromResult(collection));
            var statusResponse = await this.NotificationManager.LoadNotificationStatusAsync(this.ApplicationName, trackingIds).ConfigureAwait(false);
            Assert.IsTrue(statusResponse.NotificationStatus.First().TrackingId.Equals("Tracking Id #2", StringComparison.OrdinalIgnoreCase));
            Assert.IsTrue(statusResponse.NotificationStatus.Where(sr => !sr.IsValidTrackingId).Count() == 2);
        }
    }
}
