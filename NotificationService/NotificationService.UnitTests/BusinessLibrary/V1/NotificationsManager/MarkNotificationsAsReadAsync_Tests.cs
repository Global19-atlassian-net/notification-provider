// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.BusinessLibrary.V1.NotificationsManager_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Threading.Tasks;
    using Moq;
    using NotificationService.Contracts;
    using NotificationService.Contracts.Entities;
    using NotificationService.Contracts.Entities.Web;
    using NotificationService.Contracts.Models.Web.Request;
    using NUnit.Framework;

    /// <summary>
    /// Test Class.
    /// </summary>
    /// <seealso cref="NotificationService.UnitTests.BusinessLibrary.V1.NotificationsManager_Tests.NotificationsTestsBase" />
    [ExcludeFromCodeCoverage]
    public class MarkNotificationsAsReadAsync_Tests : NotificationsTestsBase
    {
        /// <summary>
        /// Setups the base.
        /// </summary>
        [SetUp]
        public override void SetupBase()
        {
            base.SetupBase();
        }

        /// <summary>
        /// Marks the notification's read status asynchronously with invalid application identifier.
        /// </summary>
        /// <param name="applicationName">Name of the application.</param>
        /// <param name="notificationId">The notification identifier.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void MarkNotificationsAsReadAsync_WithInvalidApplicationId(string applicationName)
        {
            IEnumerable<string> notificationIds = new List<string> { "noteid" };
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationManager.MarkNotificationsAsReadAsync(applicationName, notificationIds).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("The application name is not specified.", StringComparison.Ordinal));
        }

        /// <summary>
        /// Marks the notification's read status asynchronously with null notification identifiers.
        /// </summary>
        [Test]
        public void MarkNotificationsAsReadAsync_WithNullIds()
        {
            IEnumerable<string> notificationIds = null;
            string applicationName = "appid";
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationManager.MarkNotificationsAsReadAsync(applicationName, notificationIds).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("The notification identifiers are not specified.", StringComparison.Ordinal));
        }

        [Test]
        public void MarkNotificationsAsReadAsync_WithEmptyIds()
        {
            IEnumerable<string> notificationIds = new List<string>();
            string applicationName = "appid";
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationManager.MarkNotificationsAsReadAsync(applicationName, notificationIds).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("The notification identifiers are not specified.", StringComparison.Ordinal));
        }

        /// <summary>
        /// Marks the notification's read status asynchronously with valid notification identifier.
        /// </summary>
        [Test]
        public void MarkNotificationAsReadAsync_WithValidInput()
        {
            this.NotificationId = "Notification Id #2";
            IEnumerable<string> notificationIds = new List<string>
            {
                this.NotificationId,
            };

            EntityCollection<WebNotificationItemEntity> collection = new EntityCollection<WebNotificationItemEntity>();
            collection.Items = this.NotificationEntities.Where(note => note.NotificationId.Equals(this.NotificationId, StringComparison.Ordinal));
            _ = this.notificationsRepositoryMock.Setup<Task<EntityCollection<WebNotificationItemEntity>>>(rp => rp.ReadAsync(
                It.IsAny<Expression<Func<WebNotificationItemEntity, bool>>>(),
                It.IsAny<Expression<Func<WebNotificationItemEntity, NotificationPriority>>>(),
                It.IsAny<string>(),
                It.IsAny<int>())).
                Returns(Task.FromResult(collection));
            _ = this.notificationsRepositoryMock.Setup(rp => rp.UpsertAsync(It.IsAny<IEnumerable<WebNotificationItemEntity>>())).ReturnsAsync(It.IsAny<IEnumerable<WebNotificationItemEntity>>());
            var task = this.NotificationManager.MarkNotificationsAsReadAsync(this.ApplicationName, notificationIds);
            Assert.IsTrue(task.Status == TaskStatus.RanToCompletion);
            this.notificationsRepositoryMock.Verify(rp => rp.ReadAsync(
                It.IsAny<Expression<Func<WebNotificationItemEntity, bool>>>(),
                It.IsAny<Expression<Func<WebNotificationItemEntity, NotificationPriority>>>(),
                It.IsAny<string>(),
                It.IsAny<int>()), Times.Once);
            this.notificationsRepositoryMock.Verify(rp => rp.UpsertAsync(It.IsAny<IEnumerable<WebNotificationItemEntity>>()), Times.Once);
        }
    }
}
