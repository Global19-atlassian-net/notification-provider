// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.BusinessLibrary.V1.NotificationsManager_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Threading.Tasks;
    using Moq;
    using NotificationService.Contracts;
    using NotificationService.Contracts.Entities;
    using NotificationService.Contracts.Entities.Web;
    using NotificationService.Contracts.Models.Graph;
    using NotificationService.Contracts.Models.Web.Request;
    using NotificationService.Contracts.Models.Web.Response;
    using NUnit.Framework;

    /// <summary>
    /// Test Class.
    /// </summary>
    /// <seealso cref="NotificationService.UnitTests.BusinessLibrary.V1.NotificationsManager_Tests.NotificationsTestsBase" />
    [ExcludeFromCodeCoverage]
    public class ProcessNotificationsAsync_Tests : NotificationsTestsBase
    {
        /// <summary>
        /// Setups the base.
        /// </summary>
        [SetUp]
        public override void SetupBase()
        {
            base.SetupBase();
        }

        
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void ProcessNotificationsAsync_WithInvalidApplicationId(string applicationName)
        {
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationManager.ProcessNotificationsAsync(applicationName, new List<WebNotificationRequestItem>()).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("The application name is not specified.", StringComparison.Ordinal));
        }

        [Test]
        public void ProcessNotificationsAsync_WithNullNotificationRequestsCollection()
        {
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationManager.ProcessNotificationsAsync(this.ApplicationName, webNotificationRequestItems: null).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("There is no web notification request item to process.", StringComparison.Ordinal));
        }

        [Test]
        public void ProcessNotificationsAsync_WithEmptyNotificationRequestsCollection()
        {
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationManager.ProcessNotificationsAsync(this.ApplicationName, new List<WebNotificationRequestItem>()).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("There is no web notification request item to process.", StringComparison.Ordinal));
        }

        /// <summary>
        /// Conditions the notification read status asynchronously with valid notification identifier.
        /// </summary>
        [Test]
        public async Task ProcessNotificationsAsync_WithValidInputs()
        {
            List<WebNotificationRequestItem> webNotificationRequestItems = new List<WebNotificationRequestItem>
            {
                new WebNotificationRequestItem
                {
                    NotificationId = Guid.NewGuid().ToString(),
                    Title = "Test Title",
                    Body = "Test Body",
                    Priority = NotificationPriority.Normal,
                    Recipient = new Person { Name = "P1", Email = "abc@xyz.com", ObjectIdentifier = Guid.NewGuid().ToString() },
                    PublishOnUTCDate = DateTime.UtcNow.AddDays(1),
                    SendOnUtcDate = DateTime.UtcNow,
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(2),
                    Sender = new Person { Name="P2", Email = "pqr@xyz.com", ObjectIdentifier = Guid.NewGuid().ToString() },
                    TrackingId = Guid.NewGuid().ToString(),
                },
                new WebNotificationRequestItem
                {
                    NotificationId = Guid.NewGuid().ToString(),
                    Title = "Test Title",
                    Body = "Test Body",
                    Priority = NotificationPriority.Normal,
                    Recipient = new Person { Name = "P1", Email = "abc@xyz.com", ObjectIdentifier = Guid.NewGuid().ToString() },
                    PublishOnUTCDate = DateTime.UtcNow.AddDays(-1),
                    SendOnUtcDate = DateTime.UtcNow,
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(2),
                    Sender = new Person { Name="P2", Email = "pqr@xyz.com", ObjectIdentifier = Guid.NewGuid().ToString() },
                    TrackingId = Guid.NewGuid().ToString(),
                },
            };

            EntityCollection<WebNotificationItemEntity> collection = new EntityCollection<WebNotificationItemEntity>();
            collection.Items = webNotificationRequestItems.Select(wbr => wbr.ToEntity(this.ApplicationName)).ToList();
            _ = this.notificationsRepositoryMock.Setup(rp => rp.UpsertAsync(It.IsAny<IEnumerable<WebNotificationItemEntity>>())).ReturnsAsync(collection.Items);
            _ = this.notificationsRepositoryMock.Setup<Task<EntityCollection<WebNotificationItemEntity>>>(rp => rp.ReadAsync(It.IsAny<Expression<Func<WebNotificationItemEntity, bool>>>(), It.IsAny<Expression<Func<WebNotificationItemEntity, NotificationPriority>>>(), It.IsAny<string>(), It.IsAny<int>())).
                Returns(Task.FromResult(collection));
            IEnumerable<WebNotification> notifications = await this.NotificationManager.ProcessNotificationsAsync(this.ApplicationName, webNotificationRequestItems);
            WebNotification notification = notifications.FirstOrDefault();
            Assert.IsTrue(notifications.Count() == 1);
            Assert.IsTrue(notification.NotificationId.Equals(webNotificationRequestItems.Last().NotificationId, StringComparison.Ordinal));
            
        }
    }
}
