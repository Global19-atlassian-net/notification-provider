// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Data.Repositories.WebNotificationItemEntityRepository_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Threading;
    using Microsoft.Azure.Cosmos;
    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.Options;
    using Moq;
    using NotificationService.Common;
    using NotificationService.Contracts;
    using NotificationService.Contracts.Entities.Web;
    using NotificationService.Contracts.Models.Graph;
    using NotificationService.Data;
    using NotificationService.Data.Repositories;

    /// <summary>
    /// WebNotificationItemEntityBaseTests.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public class WebNotificationItemEntityBaseTests
    {
        /// <summary>
        /// Gets or sets the mock feed response.
        /// </summary>
        /// <value>
        /// The mock feed response.
        /// </value>
        public Mock<FeedResponse<WebNotificationItemEntity>> MockFeedResponse { get; set; }

        /// <summary>
        /// Gets or sets the mock item response.
        /// </summary>
        /// <value>
        /// The mock item response.
        /// </value>
        public Mock<ItemResponse<WebNotificationItemEntity>> MockItemResponse { get; set; }

        /// <summary>
        /// Gets or sets the cosmos database setting.
        /// </summary>
        /// <value>
        /// The cosmos database setting.
        /// </value>
        public IOptions<CosmosDBSetting> CosmosDBSetting { get; set; }

        /// <summary>
        /// Gets or sets the logger.
        /// </summary>
        /// <value>
        /// The logger.
        /// </value>
        public ILogger<WebNotificationItemEntityRepository> Logger { get; set; }

        /// <summary>
        /// Gets or sets the cosmos linq query mock.
        /// </summary>
        /// <value>
        /// The cosmos linq query mock.
        /// </value>
        public Mock<ICosmosLinqQuery> CosmosLinqQueryMock { get; set; }

        /// <summary>
        /// Gets or sets the cosmos database query client.
        /// </summary>
        /// <value>
        /// The cosmos database query client.
        /// </value>
        public Mock<ICosmosDBQueryClient> CosmosDBQueryClient { get; set; }

        /// <summary>
        /// Gets or sets the cosmos container.
        /// </summary>
        /// <value>
        /// The cosmos container.
        /// </value>
        public Mock<Container> CosmosContainer { get; set; }

        /// <summary>
        /// Gets or sets the notification repository.
        /// </summary>
        /// <value>
        /// The notification repository.
        /// </value>
        public WebNotificationItemEntityRepository NotificationRepository { get; set; }

        /// <summary>
        /// Gets the name of the application.
        /// </summary>
        /// <value>
        /// The name of the application.
        /// </value>
        public string ApplicationName { get; } = "Application 1";

        /// <summary>
        /// Gets or sets the notification identifier.
        /// </summary>
        /// <value>
        /// The notification identifier.
        /// </value>
        public string NotificationId { get; set; }

        /// <summary>
        /// Gets the notification entities.
        /// </summary>
        /// <value>
        /// The notification entities.
        /// </value>
        public IList<WebNotificationItemEntity> NotificationEntities => new List<WebNotificationItemEntity>()
            {
                new WebNotificationItemEntity
                {
                    Application = this.ApplicationName,
                    Id = "Test Id #1",
                    Title = "Test Title 1",
                    Body = "Test Body 1",
                    NotificationId = "Notification Id #1",
                    Priority = NotificationPriority.Normal,
                    Recipient = new Person { Name = "P1", Email = "abc@xyz.com", ObjectIdentifier = Guid.NewGuid().ToString() },
                    PublishOnUTCDate = DateTime.UtcNow,
                    SendOnUtcDate = DateTime.UtcNow.AddHours(-1),
                    ReadStatus = NotificationReadStatus.New,
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(1),
                },
                new WebNotificationItemEntity
                {
                    Application = this.ApplicationName,
                    Id = "TestId #2",
                    Title = "Test Title 2",
                    Body = "Test Body 2",
                    NotificationId = "Notification Id #2",
                    Priority = NotificationPriority.Normal,
                    Recipient = new Person { Name = "P2", Email = "pqr@xyz.com", ObjectIdentifier = Guid.NewGuid().ToString() },
                    PublishOnUTCDate = DateTime.UtcNow.AddDays(1),
                    SendOnUtcDate = DateTime.UtcNow.AddHours(-1),
                    ReadStatus = NotificationReadStatus.New,
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(3),
                },
                new WebNotificationItemEntity
                {
                    Application = this.ApplicationName,
                    Id = "TestId #3",
                    Title = "Test Title 3",
                    Body = "Test Body 3",
                    NotificationId = "Notification Id #3",
                    Priority = NotificationPriority.High,
                    Recipient = new Person { Name = "P3", Email = "lmn@xyz.com", ObjectIdentifier = Guid.NewGuid().ToString() },
                    PublishOnUTCDate = DateTime.UtcNow.AddDays(-2),
                    SendOnUtcDate = DateTime.UtcNow.AddHours(-3),
                    ReadStatus = NotificationReadStatus.New,
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(2),
                },
                new WebNotificationItemEntity
                {
                    Application = this.ApplicationName,
                    Id = "TestId #4",
                    Title = "Test Title 4",
                    Body = "Test Body 4",
                    NotificationId = "Notification Id #4",
                    Priority = NotificationPriority.Normal,
                    Recipient = new Person { Name = "P2", Email = "pqr@xyz.com", ObjectIdentifier = Guid.NewGuid().ToString() },
                    PublishOnUTCDate = DateTime.UtcNow.AddDays(-2),
                    SendOnUtcDate = DateTime.UtcNow.AddHours(-3),
                    ReadStatus = NotificationReadStatus.New,
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(-1),
                },
            };

        /// <summary>
        /// Setups the test base.
        /// </summary>
        protected void SetupTestBase()
        {
            this.CosmosLinqQueryMock = new Mock<ICosmosLinqQuery>();
            this.CosmosDBQueryClient = new Mock<ICosmosDBQueryClient>();
            this.CosmosContainer = new Mock<Container>();
            this.MockItemResponse = new Mock<ItemResponse<WebNotificationItemEntity>>();
            var mockFeedIterator = new Mock<FeedIterator<WebNotificationItemEntity>>();
            this.MockFeedResponse = new Mock<FeedResponse<WebNotificationItemEntity>>();

            IOrderedQueryable<WebNotificationItemEntity> queryableEntityReponse = this.NotificationEntities.AsQueryable().OrderBy(e => e.NotificationId);
            this.CosmosDBSetting = Options.Create(new CosmosDBSetting() { Database = "TestDatabase", Container = "TestContainer", Key = "TestKey", Uri = "TestUri" });
            this.Logger = Mock.Of<ILogger<WebNotificationItemEntityRepository>>();
            IQueryable<WebNotificationItemEntity> queryResult = null;
            _ = this.CosmosLinqQueryMock
               .Setup(clq => clq.GetFeedIterator(It.IsAny<IQueryable<WebNotificationItemEntity>>()))
               .Callback<IQueryable<WebNotificationItemEntity>>(r => queryResult = r)
               .Returns(mockFeedIterator.Object);
            _ = mockFeedIterator.Setup(it => it.ReadNextAsync(It.IsAny<CancellationToken>())).ReturnsAsync(this.MockFeedResponse.Object);
            _ = this.CosmosContainer
                .Setup(container => container.CreateItemAsync(It.IsAny<WebNotificationItemEntity>(), It.IsAny<PartitionKey>(), It.IsAny<ItemRequestOptions>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(this.MockItemResponse.Object);

            _ = this.CosmosContainer
                .Setup(container => container.UpsertItemAsync(It.IsAny<WebNotificationItemEntity>(), It.IsAny<PartitionKey>(), It.IsAny<ItemRequestOptions>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(this.MockItemResponse.Object);

            _ = this.CosmosContainer
                .Setup(container => container.DeleteItemAsync<WebNotificationItemEntity>(It.IsAny<string>(), It.IsAny<PartitionKey>(), It.IsAny<ItemRequestOptions>(), It.IsAny<CancellationToken>()))
                .ReturnsAsync(this.MockItemResponse.Object);

            _ = this.CosmosContainer
                .Setup(container => container.GetItemLinqQueryable<WebNotificationItemEntity>(It.IsAny<bool>(), It.IsAny<string>(), It.IsAny<QueryRequestOptions>()))
                .Returns(queryableEntityReponse);

            _ = this.CosmosDBQueryClient
                .Setup(cdq => cdq.GetCosmosContainer(It.IsAny<string>(), It.IsAny<string>()))
                .Returns(this.CosmosContainer.Object);

            this.NotificationRepository = new WebNotificationItemEntityRepository(this.CosmosDBSetting, this.CosmosDBQueryClient.Object, this.Logger, this.CosmosLinqQueryMock.Object);
        }
    }
}
