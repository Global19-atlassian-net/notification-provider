// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Data.Repositories.WebNotificationItemEntityRepository_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Net;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Azure.Cosmos;
    using Moq;
    using NotificationService.Contracts.Entities.Web;
    using NUnit.Framework;

    /// <summary>
    /// Test Class.
    /// </summary>
    /// <seealso cref="NotificationService.UnitTests.Data.Repositories.WebNotificationItemEntityRepository_Tests.WebNotificationItemEntityBaseTests" />
    [ExcludeFromCodeCoverage]
    public class UpsertAsync_WebNotificationItemRepository_Tests : WebNotificationItemEntityBaseTests
    {
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize() => this.SetupTestBase();

        /// <summary>
        /// Upserts the entities  with null entities.
        /// </summary>
        [Test]
        public void UpsertAsync_WithNullEntities()
        {
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationRepository.UpsertAsync(null).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("There is no entity to persist.", StringComparison.Ordinal));
        }

        /// <summary>
        /// Upsertsyncs the entities.
        /// </summary>
        [Test]
        public async Task Upsertsync_WithEntities()
        {
            IEnumerable<WebNotificationItemEntity> webNotificationItemEntities = await this.NotificationRepository.UpsertAsync(this.NotificationEntities).ConfigureAwait(false);
            Assert.IsTrue(webNotificationItemEntities.Count() == 0);
        }
    }
}
