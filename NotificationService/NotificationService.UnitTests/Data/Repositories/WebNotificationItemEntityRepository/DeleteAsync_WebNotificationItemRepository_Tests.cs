// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Data.Repositories.WebNotificationItemEntityRepository_Tests
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Net;
    using System.Threading.Tasks;
    using NotificationService.Common.Exceptions;
    using NotificationService.Contracts.Entities.Web;
    using NUnit.Framework;

    /// <summary>
    /// Test class
    /// </summary>
    /// <seealso cref="NotificationService.UnitTests.Data.Repositories.WebNotificationItemEntityRepository_Tests.WebNotificationItemEntityBaseTests" />
    [ExcludeFromCodeCoverage]
    public class DeleteAsync_WebNotificationItemRepository_Tests : WebNotificationItemEntityBaseTests
    {
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize()
        {
            this.SetupTestBase();
            _ = this.MockFeedResponse.SetupGet(fr => fr.Resource).Returns(this.NotificationEntities.Where(nt => nt.NotificationId.Equals(this.NotificationId, StringComparison.Ordinal)));
        }

        /// <summary>
        /// Deletes entity with invalid entity identifier.
        /// </summary>
        /// <param name="entityId">The entity identifier.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void DeleteAsync_WithInvalidEntityId(string entityId)
        {
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationRepository.DeleteAsync(entityId).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("The entity Id is not specified.", StringComparison.Ordinal));
        }

        /// <summary>
        /// Deletes the asynchronous with non existent entity identifier.
        /// </summary>
        [Test]
        public void DeleteAsync_WithNonExistentEntityId()
        {
            this.NotificationId = "Notification Id #10";
            var ex = Assert.ThrowsAsync<NotificationServiceException>(async () => await this.NotificationRepository.DeleteAsync(this.NotificationId).ConfigureAwait(false));
            Assert.IsTrue(typeof(NotificationServiceException).FullName.Equals(ex.GetType().FullName, StringComparison.Ordinal));
            Assert.IsTrue(ex.Message.Equals($"The notification with notificationId '{this.NotificationId}' is not found.", StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Deletes the asynchronous with existent entity identifier successful response.
        /// </summary>
        [Test]
        public async Task DeleteAsync_WithExistentEntityId_SuccessfulResponse()
        {
            this.NotificationId = "Notification Id #2";
            WebNotificationItemEntity webNotificationItemEntity = this.NotificationEntities.Where(nt => nt.NotificationId.Equals(this.NotificationId, StringComparison.Ordinal)).FirstOrDefault();
            _ = this.MockItemResponse.SetupGet(ir => ir.Resource).Returns(webNotificationItemEntity);
            _ = this.MockItemResponse.SetupGet(ir => ir.StatusCode).Returns(webNotificationItemEntity == null ? HttpStatusCode.BadRequest : HttpStatusCode.OK);
            var isSuccess = await this.NotificationRepository.DeleteAsync(this.NotificationId).ConfigureAwait(false);
            Assert.IsTrue(isSuccess);
        }

        /// <summary>
        /// Deletes the asynchronous with existent entity identifier failed response.
        /// </summary>
        [Test]
        public void DeleteAsync_WithExistentEntityId_FailedResponse()
        {
            this.NotificationId = "Notification Id #2";
            WebNotificationItemEntity webNotificationItemEntity = this.NotificationEntities.Where(nt => nt.NotificationId.Equals(this.NotificationId, StringComparison.Ordinal)).FirstOrDefault();
            _ = this.MockItemResponse.SetupGet(ir => ir.Resource).Returns(webNotificationItemEntity);
            _ = this.MockItemResponse.SetupGet(ir => ir.StatusCode).Returns(HttpStatusCode.BadRequest);
            var ex = Assert.ThrowsAsync<NotificationServiceException>(async () => await this.NotificationRepository.DeleteAsync(this.NotificationId).ConfigureAwait(false));
            Assert.IsTrue(typeof(NotificationServiceException).FullName.Equals(ex.GetType().FullName, StringComparison.Ordinal));
            Assert.IsTrue(ex.Message.Equals($"The deletion of entity with identifier '{this.NotificationId}' failed with status code response of '{HttpStatusCode.BadRequest}'.", StringComparison.Ordinal));
        }
    }
}
