// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Service.Hubs_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Text.Json;
    using Microsoft.AspNetCore.SignalR;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.Logging;
    using Moq;
    using NotificationService.BusinessLibrary.Trackers;
    using NotificationService.Contracts;
    using WebNotifications.Hubs;
    using WebNotifications.Hubs.Interfaces;

    /// <summary>
    /// Test Base class.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public class NotificationsHubBaseTest
    {
        /// <summary>
        /// The logger mock
        /// </summary>
        protected Mock<ILogger<NotificationsHub>> loggerMock;

        /// <summary>
        /// The clients mock
        /// </summary>
        protected Mock<IHubCallerClients<INotificationsClient>> clientsMock;

        /// <summary>
        /// The tracker mock.
        /// </summary>
        protected Mock<IUserConnectionTracker> trackerMock;

        /// <summary>
        /// The mock client.
        /// </summary>
        protected Mock<INotificationsClient> clientMock;

        /// <summary>
        /// The configuration.
        /// </summary>
        protected IConfiguration configuration;

        /// <summary>
        /// The notifications hub.
        /// </summary>
        protected NotificationsHub notificationsHub;

        /// <summary>
        /// The hub context mock
        /// </summary>
        private Mock<HubCallerContext> hubContextMock;

        /// <summary>
        /// Setups the base.
        /// </summary>
        public void SetupBase()
        {
            var applications = new List<ApplicationAccounts>
            {
                new ApplicationAccounts
                {
                    ApplicationName = "Some Application"
                }
            };
            var jsonRepresentation = JsonSerializer.Serialize(applications);
            Dictionary<string, string> applicationAccounts = new Dictionary<string, string>
            {
                { "ApplicationAccounts", jsonRepresentation }
            };

            this.loggerMock = new Mock<ILogger<NotificationsHub>>();
            this.clientsMock = new Mock<IHubCallerClients<INotificationsClient>>();
            this.clientMock = new Mock<INotificationsClient>();
            this.trackerMock = new Mock<IUserConnectionTracker>();
            this.configuration = new ConfigurationBuilder().AddInMemoryCollection(applicationAccounts).Build();
            this.hubContextMock = new Mock<HubCallerContext>();
            this.notificationsHub = new NotificationsHub(this.trackerMock.Object, this.configuration, this.loggerMock.Object)
            {
                Clients = this.clientsMock.Object
            };
            this.notificationsHub.Context = this.hubContextMock.Object;
            _ = this.hubContextMock.SetupGet(hcm => hcm.ConnectionId).Returns(Guid.NewGuid().ToString());
            _ = this.hubContextMock.SetupGet(hcm => hcm.UserIdentifier).Returns("Some user");
            _ = this.clientsMock.Setup(cls => cls.User(It.IsAny<string>())).Returns(this.clientMock.Object);
            _ = this.clientsMock.SetupGet(cls => cls.All).Returns(this.clientMock.Object);
        }
    }
}
