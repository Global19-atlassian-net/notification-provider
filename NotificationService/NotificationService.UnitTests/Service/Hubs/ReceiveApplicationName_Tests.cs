// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Service.Hubs_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Text.Json;
    using Microsoft.AspNetCore.SignalR;
    using Moq;
    using NotificationService.Contracts;
    using NotificationService.Contracts.Models.Trackers;
    using NUnit.Framework;

    /// <summary>
    /// Test class.
    /// </summary>
    /// <seealso cref="NotificationsHubBaseTest" />
    [ExcludeFromCodeCoverage]
    public class ReceiveApplicationName_Tests : NotificationsHubBaseTest
    {
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize() => this.SetupBase();

        /// <summary>
        /// Receives the name of the application name with invalid application name.
        /// </summary>
        /// <param name="applicationName">Name of the application.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void ReceiveApplicationName_WithInvalidApplicationName(string applicationName)
        {
            var ex = Assert.Throws<ArgumentException>(() => this.notificationsHub.ReceiveApplicationName(applicationName));
            Assert.IsTrue(ex.Message.StartsWith("Missing application name.", StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Sends the notifications asynchronous with non registered application.
        /// </summary>
        [Test]
        public void ReceiveApplicationName_WithNonRegisteredApplication()
        {
            string applicationName = "Other Application";
            this.trackerMock.Setup(tm => tm.SetConnectionApplicationName(applicationName, It.IsAny<UserConnectionInfo>()));
            var ex = Assert.Throws<HubException>(() => this.notificationsHub.ReceiveApplicationName(applicationName));
            Assert.IsTrue(ex.Message.StartsWith("Invalid application name.", StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Sends the notifications asynchronous with valid input.
        /// </summary>
        [Test]
        public void ReceiveApplicationName_WithValidInput()
        {
            string applicationName = "Some Application";
            this.trackerMock.Setup(tm => tm.SetConnectionApplicationName(applicationName, It.IsAny<UserConnectionInfo>()));
            this.notificationsHub.ReceiveApplicationName(applicationName);
            this.trackerMock.Verify(tm => tm.SetConnectionApplicationName(It.IsAny<string>(), It.IsAny<UserConnectionInfo>()), Times.Once);
        }
    }
}
