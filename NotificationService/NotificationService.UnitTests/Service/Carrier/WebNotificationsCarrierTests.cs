// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Service.Carrier_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.SignalR;
    using Microsoft.Extensions.Logging;
    using Moq;
    using NotificationService.BusinessLibrary.Trackers;
    using NotificationService.Contracts.Entities.Web;
    using NotificationService.Contracts.Models.Graph;
    using NotificationService.Contracts.Models.Web.Response;
    using WebNotifications.Carriers;
    using WebNotifications.Hubs;
    using WebNotifications.Hubs.Interfaces;
    using NUnit.Framework;

    /// <summary>
    /// Test class.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public class WebNotificationsCarrierTests
    {
        /// <summary>
        /// The hub context mock.
        /// </summary>
        private Mock<IHubContext<NotificationsHub, INotificationsClient>> hubContextMock;

        /// <summary>
        /// The logger mock.
        /// </summary>
        private Mock<ILogger<WebNotificationsCarrier>> loggerMock;

        /// <summary>
        /// The mock clients.
        /// </summary>
        private Mock<IHubClients<INotificationsClient>> mockClients;

        /// <summary>
        /// The mock client.
        /// </summary>
        private Mock<INotificationsClient> mockClient;

        /// <summary>
        /// The quick carrier.
        /// </summary>
        private WebNotificationsCarrier webCarrier;

        /// <summary>
        /// The user connections reader mock.
        /// </summary>
        private Mock<IUserConnectionsReader> userConnectionsReaderMock;

        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize()
        {
            this.hubContextMock = new Mock<IHubContext<NotificationsHub, INotificationsClient>>();
            this.loggerMock = new Mock<ILogger<WebNotificationsCarrier>>();
            this.mockClients = new Mock<IHubClients<INotificationsClient>>();
            this.mockClient = new Mock<INotificationsClient>();
            this.userConnectionsReaderMock = new Mock<IUserConnectionsReader>();
            this.webCarrier = new WebNotificationsCarrier(this.hubContextMock.Object, this.userConnectionsReaderMock.Object, this.loggerMock.Object);
        }

        /// <summary>
        /// Ctors the null hub context.
        /// </summary>
        [Test]
        public void Ctor_NullHubContext()
        {
            var ex = Assert.Throws<ArgumentNullException>(() => new WebNotificationsCarrier(null, this.userConnectionsReaderMock.Object, this.loggerMock.Object));
            Assert.IsTrue(ex.ParamName.Equals("hubContext", StringComparison.OrdinalIgnoreCase));
        }

        [Test]
        public void Ctor_NullConnectionsReader()
        {
            var ex = Assert.Throws<ArgumentNullException>(() => new WebNotificationsCarrier(this.hubContextMock.Object, null, this.loggerMock.Object));
            Assert.IsTrue(ex.ParamName.Equals("userConnectionsReader", StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Ctors the null logger.
        /// </summary>
        [Test]
        public void Ctor_NullLogger()
        {
            var ex = Assert.Throws<ArgumentNullException>(() => new WebNotificationsCarrier(this.hubContextMock.Object, this.userConnectionsReaderMock.Object, null));
            Assert.IsTrue(ex.ParamName.Equals("logger", StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Ctors the valid input.
        /// </summary>
        [Test]
        public void Ctor_ValidInput()
        {
            var carrier = new WebNotificationsCarrier(this.hubContextMock.Object, this.userConnectionsReaderMock.Object, this.loggerMock.Object);
            Assert.IsTrue(carrier.GetType().FullName.Equals(typeof(WebNotificationsCarrier).FullName, StringComparison.Ordinal));
        }

        /// <summary>
        /// Test with null notifications.
        /// </summary>
        [Test]
        public async Task SendAsync_NullNotifications()
        {
            IEnumerable<WebNotification> webNotifications = null;
            await this.webCarrier.SendAsync(webNotifications).ConfigureAwait(false);

            // Extension methods cannot be mocked....so count invocations on the mock.
            Assert.IsTrue(this.loggerMock.Invocations.Count == 3);
        }

        /// <summary>
        /// Sends the asynchronously empty notifications.
        /// </summary>
        [Test]
        public async Task SendAsync_EmptyNotifications()
        {
            IEnumerable<WebNotification> webNotifications = new List<WebNotification>();
            await this.webCarrier.SendAsync(webNotifications).ConfigureAwait(false);

            // Extension methods cannot be mocked....so count invocations on the mock.
            Assert.IsTrue(this.loggerMock.Invocations.Count == 3);
        }

        /// <summary>
        /// Test behavior on exception in logic.
        /// </summary>
        [Test]
        public async Task SendAsync_ValidInput_WithExceptionInLogic()
        {
            Exception ex = new Exception("Test exception.");
            string receipentObjectIdentifier = Guid.NewGuid().ToString();
            IEnumerable<WebNotification> webNotifications = new List<WebNotification>
            {
                new WebNotification
                {
                    NotificationId = Guid.NewGuid().ToString(),
                    Title = "Test Title",
                    Body = "Test Body",
                    PublishOnUTCDate = DateTime.UtcNow.AddDays(-1),
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(1),
                    ReadStatus = NotificationReadStatus.Read,
                    Recipient = new Person
                    {
                        Name = "Test Reciver",
                        Email = "abc@xyz.com",
                        ObjectIdentifier = receipentObjectIdentifier,
                    },
                },
            };
            _ = this.mockClient.Setup(cli => cli.ReceiveNotificationAsync(webNotifications.First())).Returns(Task.CompletedTask);
            _ = this.userConnectionsReaderMock.Setup(ucr => ucr.GetUserConnectionIds(It.IsAny<string>(), It.IsAny<string>())).Throws(ex);
            _ = this.mockClients.Setup(mc => mc.Clients(It.IsAny<IReadOnlyList<string>>())).Returns(this.mockClient.Object);
            _ = this.hubContextMock.SetupGet(hc => hc.Clients).Returns(this.mockClients.Object);
            var Ids = await this.webCarrier.SendAsync(webNotifications).ConfigureAwait(false);
            this.userConnectionsReaderMock.Verify(ucr => ucr.GetUserConnectionIds(It.IsAny<string>(), It.IsAny<string>()), Times.Once);

            // Extension methods cannot be mocked....so count invocations on the mock.
            Assert.IsTrue(this.loggerMock.Invocations.Count == 3);
        }

        /// <summary>
        /// Test with valid input.
        /// </summary>
        [Test]
        public async Task SendAsync_ValidInput()
        {
            string receipentObjectIdentifier = Guid.NewGuid().ToString();
            string notificationId = Guid.NewGuid().ToString();
            IEnumerable<WebNotification> webNotifications = new List<WebNotification>
            {
                new WebNotification
                {
                    NotificationId = notificationId,
                    Title = "Test Title",
                    Body = "Test Body",
                    PublishOnUTCDate = DateTime.UtcNow.AddDays(-1),
                    ExpiresOnUTCDate = DateTime.UtcNow.AddDays(1),
                    ReadStatus = NotificationReadStatus.Read,
                    Recipient = new Person
                    {
                        Name = "Test Reciver",
                        Email = "abc@xyz.com",
                        ObjectIdentifier = receipentObjectIdentifier,
                    },
                },
            };
            _ = this.userConnectionsReaderMock.Setup(ucr => ucr.GetUserConnectionIds(It.IsAny<string>(), It.IsAny<string>())).Returns(new string[] { Guid.NewGuid().ToString() });
            _ = this.mockClient.Setup(cli => cli.ReceiveNotificationAsync(webNotifications.First())).Returns(Task.CompletedTask);
            _ = this.mockClients.Setup(mc => mc.Clients(It.IsAny<IReadOnlyList<string>>())).Returns(this.mockClient.Object);
            _ = this.hubContextMock.SetupGet(hc => hc.Clients).Returns(this.mockClients.Object);
            var Ids = await this.webCarrier.SendAsync(webNotifications).ConfigureAwait(false);
            this.mockClients.Verify(cls => cls.Clients(It.IsAny<IReadOnlyList<string>>()), Times.Once);
            this.mockClient.Verify(cli => cli.ReceiveNotificationAsync(It.IsAny<WebNotification>()), Times.Once);
            this.hubContextMock.Verify(hcm => hcm.Clients, Times.Once);
            Assert.IsTrue(Ids.First() == notificationId);
        }
    }
}
