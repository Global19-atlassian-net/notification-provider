// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Controllers.V1.NotificationsController_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using NotificationService.Contracts.Models.Web.Request;
    using NUnit.Framework;

    /// <summary>
    /// Test class.
    /// </summary>
    /// <seealso cref="NotificationsControllerBaseTest" />
    [ExcludeFromCodeCoverage]
    public class UpdateNotificationsReadStatusTests : NotificationsControllerBaseTest
    {
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize() => this.SetupBase();

        /// <summary>
        /// Updates the name of the notification read status tests invalid application.
        /// </summary>
        /// <param name="applicationName">Name of the application.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void UpdateNotificationsReadStatusTests_InvalidApplicationName(string applicationName)
        {
            NotificationIdsContainer notificationIdsContainer = new NotificationIdsContainer
            {
                NotificationIds = new List<string>
                {
                    "some Id"
                }
            };

            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationsControllerObject.UpdateNotificationsReadStatus(applicationName, notificationIdsContainer).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("Application name is mandatory", StringComparison.Ordinal));
        }

        /// <summary>
        /// Updates the notification read status tests with null container.
        /// </summary>
        [Test]
        public void UpdateNotificationsReadStatusTests_NullContainer()
        {
            var ex = Assert.ThrowsAsync<ArgumentNullException>(async () => await this.NotificationsControllerObject.UpdateNotificationsReadStatus(this.ApplicationName, notificationIdsContainer: null).ConfigureAwait(false));
            Assert.IsTrue(ex.ParamName.Equals("notificationIdsContainer", StringComparison.Ordinal));
        }

        /// <summary>
        /// Updates the notification read status tests valid inputs.
        /// </summary>
        [Test]
        public void UpdateNotificationsReadStatusTests_ValidInputs()
        {
            string notificationId = Guid.NewGuid().ToString();
            NotificationIdsContainer notificationIdsContainer = new NotificationIdsContainer
            {
                NotificationIds = new List<string>
                {
                    notificationId,
                }
            };
            _ = this.NotificationsManagerMock.Setup(nm => nm.MarkNotificationsAsReadAsync(this.ApplicationName, notificationIdsContainer.NotificationIds)).Returns(Task.CompletedTask);
            var result = this.NotificationsControllerObject.UpdateNotificationsReadStatus(this.ApplicationName, notificationIdsContainer);
            Assert.IsTrue(result.Result.GetType().FullName.Equals(typeof(NoContentResult).FullName, StringComparison.Ordinal));
        }
    }
}
