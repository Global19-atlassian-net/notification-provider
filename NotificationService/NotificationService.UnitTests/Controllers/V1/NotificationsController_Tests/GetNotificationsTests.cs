// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Controllers.V1.NotificationsController_Tests
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Moq;
    using NotificationService.Contracts.Models.Graph;
    using NotificationService.Contracts.Models.Web.Response;
    using NUnit.Framework;

    /// <summary>
    /// Test Class.
    /// </summary>
    /// <seealso cref="NotificationsControllerBaseTest" />
    [ExcludeFromCodeCoverage]
    public class GetNotificationsTests : NotificationsControllerBaseTest
    {
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize() => this.SetupBase();

        /// <summary>
        /// Gets the name of the notifications invalid application.
        /// </summary>
        /// <param name="applicationName">Name of the application.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void GetNotifications_InvalidApplicationName(string applicationName)
        {
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationsControllerObject.GetNotifications(applicationName).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("Application name is mandatory", StringComparison.Ordinal));
        }

        /// <summary>
        /// Gets the name of the notifications valid application.
        /// </summary>
        [Test]
        public void GetNotifications_ValidApplicationName()
        {
            string notificationId = Guid.NewGuid().ToString();
            WebNotificationResponse response = new WebNotificationResponse();
            response.Notifications.Add(new WebNotification
            {
                NotificationId = notificationId,
                Recipient = new Person { ObjectIdentifier = "test object identifier." },
                Title = "Test Title",
                Body = "Test Body",
            });

            _ = this.NotificationsManagerMock.Setup(nm => nm.DeliverNotificationsAsync(It.IsAny<string>(), It.IsAny<string>())).Returns(Task.FromResult(response));
            var result = this.NotificationsControllerObject.GetNotifications(this.ApplicationName);
            Assert.IsTrue(result.Result.GetType().FullName.Equals(typeof(OkObjectResult).FullName, StringComparison.Ordinal));
            this.NotificationsManagerMock.Verify(nm => nm.DeliverNotificationsAsync(It.IsAny<string>(), It.IsAny<string>()), Times.Once);
        }
    }
}
