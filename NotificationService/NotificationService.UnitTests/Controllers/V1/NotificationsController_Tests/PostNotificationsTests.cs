// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Controllers.V1.NotificationsController_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Moq;
    using NotificationService.Contracts.Models.Web.Request;
    using NotificationService.Contracts.Models.Web.Response;
    using NUnit.Framework;

    /// <summary>
    /// Test class.
    /// </summary>
    /// <seealso cref="NotificationsControllerBaseTest" />
    [ExcludeFromCodeCoverage]
    public class PostNotificationsTests : NotificationsControllerBaseTest
    {
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize() => this.SetupBase();

        /// <summary>
        /// Posts the name of the notifications tests invalid application.
        /// </summary>
        /// <param name="applicationName">Name of the application.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void PostNotificationsTests_InvalidApplicationName(string applicationName)
        {
            WebNotificationRequestItemsContainer webNotificationRequestItemsContainer = new WebNotificationRequestItemsContainer();
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationsControllerObject.PostNotifications(applicationName, webNotificationRequestItemsContainer, this.NotificationsChannelMock.Object).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("Application name is mandatory.", StringComparison.Ordinal));
        }

        [Test]
        public void PostNotificationsTests_NullChannel()
        {
            WebNotificationRequestItemsContainer webNotificationRequestItemsContainer = new WebNotificationRequestItemsContainer();
            var ex = Assert.ThrowsAsync<ArgumentNullException>(async () => await this.NotificationsControllerObject.PostNotifications(this.ApplicationName, webNotificationRequestItemsContainer, null).ConfigureAwait(false));
            Assert.IsTrue(ex.ParamName.Equals("notificationsChannel", StringComparison.Ordinal));
        }

        /// <summary>
        /// Posts the name of the notifications tests valid application.
        /// </summary>
        [Test]
        public void PostNotificationsTests_ValidInputs()
        {
            string notificationId = Guid.NewGuid().ToString();
            WebNotificationRequestItemsContainer webNotificationRequestItemsContainer = new WebNotificationRequestItemsContainer
            {
                Notifications = new List<WebNotificationRequestItem>
                {
                    new WebNotificationRequestItem
                    {
                        Title = "Test Title",
                        Body = "Test Body",
                        NotificationId = notificationId,
                    },
                },
            };

            List<WebNotification> webNotifications = new List<WebNotification>
            {
                new WebNotification
                {
                    NotificationId = notificationId,
                    Title = "Test Title",
                    Body = "Test Body",
                },
            };

            _ = this.NotificationsManagerMock.Setup(nm => nm.ProcessNotificationsAsync(this.ApplicationName, webNotificationRequestItemsContainer.Notifications)).Returns(Task.FromResult(webNotifications.AsEnumerable()));
            _ = this.NotificationsChannelMock.Setup(ncc => ncc.AddNotificationAsync(It.IsAny<WebNotification>(), It.IsAny<CancellationToken>())).Returns(Task.FromResult(true));
            var result = this.NotificationsControllerObject.PostNotifications(this.ApplicationName, webNotificationRequestItemsContainer, this.NotificationsChannelMock.Object);
            Assert.IsTrue(result.Result.GetType().FullName.Equals(typeof(AcceptedResult).FullName, StringComparison.Ordinal));
            this.NotificationsChannelMock.Verify(ncc => ncc.AddNotificationAsync(It.IsAny<WebNotification>(), It.IsAny<CancellationToken>()), Times.Once);
        }
    }
}
