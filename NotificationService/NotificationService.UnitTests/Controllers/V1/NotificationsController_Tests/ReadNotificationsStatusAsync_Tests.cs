// <autogenerated />
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

namespace NotificationService.UnitTests.Controllers.V1.NotificationsController_Tests
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Moq;
    using NotificationService.Contracts.Entities.Web;
    using NotificationService.Contracts.Models.Web.Request;
    using NotificationService.Contracts.Models.Web.Response;
    using NUnit.Framework;

    /// <summary>
    /// Test class.
    /// </summary>
    /// <seealso cref="NotificationService.UnitTests.Controllers.V1.NotificationsController_Tests.NotificationsControllerBaseTest" />
    [ExcludeFromCodeCoverage]
    public class ReadNotificationsStatusAsync_Tests : NotificationsControllerBaseTest
    {
        /// <summary>
        /// Initializes this instance.
        /// </summary>
        [SetUp]
        public void Initialize() => this.SetupBase();

        /// <summary>
        /// Reads the notifications status asynchronously with invalid application.
        /// </summary>
        /// <param name="applicationName">Name of the application.</param>
        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        public void ReadNotificationsStatusAsync_InvalidApplicationName(string applicationName)
        {
            NotificationTrackingIdsContainer notificationTrackingIdsContainer = new NotificationTrackingIdsContainer();
            notificationTrackingIdsContainer.TrackingIds = new List<string> { Guid.NewGuid().ToString() };
            var ex = Assert.ThrowsAsync<ArgumentException>(async () => await this.NotificationsControllerObject.ReadNotificationsStatusAsync(applicationName, notificationTrackingIdsContainer).ConfigureAwait(false));
            Assert.IsTrue(ex.Message.StartsWith("Application name is mandatory.", StringComparison.Ordinal));
        }

        /// <summary>
        /// Reads the notifications status asynchronously with  null tracking identifier container.
        /// </summary>
        [Test]
        public void ReadNotificationsStatusAsync_NullTrackingIdContainer()
        {
            NotificationTrackingIdsContainer notificationTrackingIdsContainer = new NotificationTrackingIdsContainer();
            notificationTrackingIdsContainer.TrackingIds = new List<string> { Guid.NewGuid().ToString() };
            var ex = Assert.ThrowsAsync<ArgumentNullException>(async () => await this.NotificationsControllerObject.ReadNotificationsStatusAsync(this.ApplicationName, notificationTrackingIdsContainer: null).ConfigureAwait(false));
            Assert.IsTrue(ex.ParamName.Equals("notificationTrackingIdsContainer", StringComparison.Ordinal));
        }

        /// <summary>
        /// Reads the notifications status asynchronously with valid inputs.
        /// </summary>
        [Test]
        public async Task ReadNotificationsStatusAsync_ValidInputs()
        {
            NotificationTrackingIdsContainer notificationTrackingIdsContainer = new NotificationTrackingIdsContainer();
            string trackingId = Guid.NewGuid().ToString();
            WebNotificationStatusResponse response = new WebNotificationStatusResponse();
            WebNotificationStatus notificationStatus = new WebNotificationStatus
            {
                NotificationId = Guid.NewGuid().ToString(),
                TrackingId = trackingId,
                ReadStatus = NotificationReadStatus.New,
                IsValidTrackingId = true,
            };

            notificationStatus.DeliveryStatus.Add("Web", true);
            response.NotificationStatus.Add(notificationStatus);

            _ = this.NotificationsManagerMock.Setup(nm => nm.LoadNotificationStatusAsync(It.IsAny<string>(), It.IsAny<IEnumerable<string>>())).Returns(Task.FromResult(response));
            var statusResponse = await this.NotificationsControllerObject.ReadNotificationsStatusAsync(this.ApplicationName, notificationTrackingIdsContainer).ConfigureAwait(false);
            Assert.IsTrue(statusResponse.GetType().FullName.Equals(typeof(OkObjectResult).FullName, StringComparison.Ordinal));
            this.NotificationsManagerMock.Verify(nm => nm.LoadNotificationStatusAsync(It.IsAny<string>(), It.IsAny<IEnumerable<string>>()), Times.Once);
        }
    }
}
